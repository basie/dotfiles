!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/bf8aa43e/
ATTENTION! Breaking changes!	README.md	/^# ATTENTION! Breaking changes!$/;"	c
All configs for .bashrc	README.md	/^### All configs for .bashrc$/;"	S
Alternative RPM Install	README.md	/^## Alternative RPM Install$/;"	s
BashGitPrompt	bash-git-prompt.rb	/^class BashGitPrompt < Formula$/;"	c
BuildArch	bash-git-prompt.spec	/^BuildArch:      noarch$/;"	t
Contributing	README.md	/^## Contributing$/;"	s
D	gitstatus.py	/^    D = dict()$/;"	v
Donations	README.md	/^## Donations$/;"	s
END_TOKEN	bash-git-prompt.spec	/^%global END_TOKEN ### Generated by %{name} rpm package$/;"	g
EOF	git-prompt-help.sh	/^  cat <<EOF | sed 's\/\\\\\\[\\\\033\/\/g' | sed 's\/\\\\\\]\/\/g'$/;"	h
EOF	git-prompt-help.sh	/^ cat <<EOF | sed 's\/\\\\\\[\\\\033\/\/g' | sed 's\/\\\\\\]\/\/g'$/;"	h
Examples	README.md	/^## Examples$/;"	s
Further customizations	README.md	/^#### Further customizations$/;"	t
Group	bash-git-prompt.spec	/^Group:		Development\/Tools$/;"	t
Informative git prompt for bash and fish	README.md	/^# Informative git prompt for bash and fish$/;"	c
Installation	README.md	/^## Installation$/;"	s
License	README.md	/^## License$/;"	s
License	bash-git-prompt.spec	/^License:	FreeBSD$/;"	t
Name	bash-git-prompt.spec	/^Name:		bash-git-prompt$/;"	t
Print	gitstatus.py	/^        Print = D["p"]  # 2.6 case$/;"	v
Print	gitstatus.py	/^        def Print(*args, **kwd):  # 2.4, 2.5, define our own Print function$/;"	f
Prompt Structure	README.md	/^##  Prompt Structure$/;"	s
Release	bash-git-prompt.spec	/^Release:	1%{?dist}$/;"	t
Requires	bash-git-prompt.spec	/^Requires:       git$/;"	t
START_TOKEN	bash-git-prompt.spec	/^%global START_TOKEN ### Generated by %{name} rpm package$/;"	g
Source0	bash-git-prompt.spec	/^Source0:        https:\/\/github.com\/magicmonty\/%{name}\/archive\/%{version}.tar.gz$/;"	t
Summary	bash-git-prompt.spec	/^Summary:	Informative git prompt for bash and fish$/;"	t
Theme structure	README.md	/^##### Theme structure$/;"	T
Themes	README.md	/^#### Themes$/;"	t
URL	bash-git-prompt.spec	/^URL:		https:\/\/github.com\/magicmonty\/bash-git-prompt$/;"	t
Ubuntu Themes	README.md	/^##### Ubuntu Themes$/;"	T
Version	bash-git-prompt.spec	/^Version:	2.6.3$/;"	t
Who Are You?	README.md	/^## Who Are You?$/;"	s
__add_gitvar_status	gitprompt.sh	/^    __add_gitvar_status() {$/;"	f
__add_status	gitprompt.sh	/^    __add_status() {$/;"	f
__all__	gitstatus.py	/^__all__ = ["Print"]$/;"	v
__chk_gitvar_status	gitprompt.sh	/^    __chk_gitvar_status() {$/;"	f
__git_prompt_read	gitstatus.sh	/^__git_prompt_read ()$/;"	f
_def_color	prompt-colors.sh	/^  _def_color() {$/;"	f
_map_colors	prompt-colors.sh	/^  _map_colors() {$/;"	f
_term_color	prompt-colors.sh	/^  _term_color() {$/;"	f
ahead	gitstatus.py	/^                        ahead = '%s%s' % (symbols['ahead of'], num_ahead)$/;"	v
ahead	gitstatus.py	/^ahead, behind = '', ''$/;"	v
all_lines	gitstatus_pre-1.7.10.sh	/^all_lines() { echo "$1" | grep -v "^$" | wc -l ; }$/;"	f
async_run	gitprompt.sh	/^function async_run() {$/;"	f
bash-git-prompt	bash-git-prompt.spec	/^Name:		bash-git-prompt$/;"	p
behind	gitstatus.py	/^                        behind = '%s%s' % (symbols['behind'], num_behind)$/;"	v
behind	gitstatus.py	/^ahead, behind = '', ''$/;"	v
branch	gitstatus.py	/^            branch = get_tag_or_hash()$/;"	v
branch	gitstatus.py	/^            branch = st[2].split(' ')[-1]$/;"	v
branch	gitstatus.py	/^            branch = st[2].strip()$/;"	v
branch	gitstatus.py	/^branch = ''$/;"	v
caveats	bash-git-prompt.rb	/^  def caveats; <<~EOS$/;"	f	class:BashGitPrompt
changed	gitstatus.py	/^untracked, staged, changed, conflicts = [], [], [], []$/;"	v
checkUpstream	gitprompt.sh	/^function checkUpstream() {$/;"	f
clean	gitstatus.py	/^    clean = 1$/;"	v
conflicts	gitstatus.py	/^untracked, staged, changed, conflicts = [], [], [], []$/;"	v
count_lines	gitstatus_pre-1.7.10.sh	/^count_lines() { echo "$1" | egrep -c "^$2" ; }$/;"	f
createPrivateIndex	gitprompt.sh	/^function createPrivateIndex {$/;"	f
define_color_names	prompt-colors.sh	/^define_color_names() {$/;"	f
divergence	gitstatus.py	/^                divergence = divergence.lstrip('[').rstrip(']')$/;"	v
echoc	gitprompt.sh	/^function echoc() {$/;"	f
get_stash	gitstatus.py	/^def get_stash():$/;"	f
get_tag_or_hash	gitstatus.py	/^def get_tag_or_hash():$/;"	f
get_theme	gitprompt.sh	/^function get_theme() {$/;"	f
git_prompt_color_samples	git-prompt-help.sh	/^git_prompt_color_samples() {$/;"	f
git_prompt_config	gitprompt.sh	/^function git_prompt_config() {$/;"	f
git_prompt_dir	gitprompt.sh	/^function git_prompt_dir() {$/;"	f
git_prompt_examples	git-prompt-help.sh	/^git_prompt_examples() {$/;"	f
git_prompt_help	git-prompt-help.sh	/^git_prompt_help() {$/;"	f
git_prompt_list_themes	gitprompt.sh	/^function git_prompt_list_themes() {$/;"	f
git_prompt_load_colors	gitprompt.sh	/^function git_prompt_load_colors() {$/;"	f
git_prompt_load_theme	gitprompt.sh	/^function git_prompt_load_theme() {$/;"	f
git_prompt_make_custom_theme	gitprompt.sh	/^function git_prompt_make_custom_theme() {$/;"	f
git_prompt_reset	gitprompt.sh	/^git_prompt_reset() {$/;"	f
git_prompt_toggle	gitprompt.sh	/^function git_prompt_toggle() {$/;"	f
gp_add_virtualenv_to_prompt	gitprompt.sh	/^function gp_add_virtualenv_to_prompt {$/;"	f
gp_format_exit_status	gitprompt.sh	/^gp_format_exit_status() {$/;"	f
gp_install_prompt	gitprompt.sh	/^function gp_install_prompt {$/;"	f
gp_maybe_set_envar_to_path	gitprompt.sh	/^function gp_maybe_set_envar_to_path() {$/;"	f
gp_set_file_var	gitprompt.sh	/^function gp_set_file_var() {$/;"	f
gp_set_window_title	gitprompt.sh	/^function gp_set_window_title {$/;"	f
gp_truncate_pwd	gitprompt.sh	/^function gp_truncate_pwd {$/;"	f
help_git_prompt	git-prompt-help.sh	/^help_git_prompt() { git_prompt_help ; }$/;"	f
install	bash-git-prompt.rb	/^  def install$/;"	f	class:BashGitPrompt
install for the fish shell	README.md	/^### install for the fish shell$/;"	S
is_function	gitprompt.sh	/^function is_function {$/;"	f
load the theme	README.md	/^# load the theme$/;"	c
num_ahead	gitstatus.py	/^                        num_ahead = int(div[len('ahead '):].strip())$/;"	v
num_ahead	gitstatus.py	/^num_ahead, num_behind = 0, 0$/;"	v
num_behind	gitstatus.py	/^                        num_behind = int(div[len('behind '):].strip())$/;"	v
num_behind	gitstatus.py	/^num_ahead, num_behind = 0, 0$/;"	v
olderThanMinutes	gitprompt.sh	/^function olderThanMinutes() {$/;"	f
out	gitstatus.py	/^out = '\\n'.join([$/;"	v
po	gitstatus.py	/^po = Popen(['git', 'status', '--porcelain', '--branch'], env={'LC_ALL': 'C'}, stdout=PIPE, stder/;"	v
prompt_callback_default	gitprompt.sh	/^function prompt_callback_default {$/;"	f
python_version	gitstatus.py	/^    python_version = 2$/;"	v
python_version	gitstatus.py	/^    python_version = 3$/;"	v
remote	gitstatus.py	/^                remote = ''.join([behind, ahead])$/;"	v
remote	gitstatus.py	/^    remote = '.'$/;"	v
remote	gitstatus.py	/^    remote = remote.decode('utf-8')$/;"	v
remote	gitstatus.py	/^remote = ''$/;"	v
replaceSymbols	gitprompt.sh	/^function replaceSymbols() {$/;"	f
setGitPrompt	gitprompt.sh	/^function setGitPrompt() {$/;"	f
setLastCommandState	gitprompt.sh	/^function setLastCommandState() {$/;"	f
showColor	git-prompt-help.sh	/^  showColor() {$/;"	f
staged	gitstatus.py	/^untracked, staged, changed, conflicts = [], [], [], []$/;"	v
stashed	gitstatus.py	/^stashed = get_stash()$/;"	v
status	gitstatus.py	/^status = [(line[0], line[1], line[2:]) for line in stdout.decode('utf-8').splitlines()]$/;"	v
stderr	gitstatus.py	/^stdout, stderr = po.communicate()$/;"	v
stdout	gitstatus.py	/^stdout, stderr = po.communicate()$/;"	v
symbols	gitstatus.py	/^symbols = {'ahead of': 'â†‘Â·', 'behind': 'â†“Â·', 'prehash': ':'}$/;"	v
to_str	gitstatus.py	/^    to_str = str$/;"	v
to_str	gitstatus.py	/^    to_str = unicode$/;"	v
untracked	gitstatus.py	/^untracked, staged, changed, conflicts = [], [], [], []$/;"	v
updatePrompt	gitprompt.sh	/^function updatePrompt() {$/;"	f
update_old_git_prompt	gitprompt.sh	/^function update_old_git_prompt() {$/;"	f
via Git clone	README.md	/^### via Git clone$/;"	S
via [Homebrew][homebrew] on Mac OS X	README.md	/^### via [Homebrew][homebrew] on Mac OS X$/;"	S
we_are_on_repo	gitprompt.sh	/^function we_are_on_repo() {$/;"	f
